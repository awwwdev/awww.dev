# EXHIBIT B

## TASKS

### Total Type Safety and Type Checking the project [est. 8 hours Hamid]

âœ… Setting up supabase Cli Extracting Data types from supabase
ðŸŸ¦ Documenting How to update db types after db schema changes
ðŸŸ¡ Adding all missing Types to all components, functions
âœ… Onboarding Mehdi for maintaining types
âœ… Add automated Linting and Type Checking Tests before commits
âœ… Add Build Automated tests before Commit Push to Production

### Reactor Frontend + Optimize Website Speed [est. 6 hours Hamid]

âœ… Use Common Nested Layout workaround + any cleanup necessary. This would organize code further and prepare it for scaling up.
(\*Note: this Architecture was released recently. If it were released earlier, the project would be started with that as it provides better structure to organize codes, specially for nested layouts in dashboards)
âœ… Experiment with Server-Side-Rendering (SSR) , Server-less function and check it would improve [est. 2 hours]
âœ… Implement the best strategy [est. 1 hour]
Research a strategy to cache fetch data and share reusable cache between pages [est. 3 hours]

âœ… replace useGet... with useGetR
âœ… replace <Table > with <TableR>
âœ… replace <RenderQ> with renderNoData()

### Make Payer and Teacher dashboard responsive

Admin Dashboard will not be responsive
âœ… Make the website template responsive without improving tables UX on phone [est. 3 hours]
âœ… Creating a drawer menu for website
âœ… Test all pages and fix overflow bugs [Mehdi]
âœ… Test all forms in mobile [Mehdi]
âœ… Fitting current table for mobile screens (fixing paginations and top controls overflows) [Mehdi]

### Complete Teacher Dashboard [Mehdi]

âœ… View Table his/her sessions by month
âœ… View table of sessions for each course and every session is from which package
âœ… View table of his/her topics
âœ… View table of his/her expertise
ðŸŸ¡ View table of his/her courses ( and students in that course)
ðŸŸ¦View table of the details for each course application
âœ… View table of packages purchased by course
ðŸŸ¦View table of payments received + total amount received
âœ… View table of the notes for each introductory sessions

ðŸŸ¦ Form: Insert every session after session held/canceled (and its reason, if canceled)
ðŸŸ¦ Every session should be approved by admins

### Complete Admin Dashboard [Mehdi]

ðŸŸ¦ Create + Update + Delete Topics
ðŸŸ¦ Create + Update + Delete: Add Expertise
ðŸŸ¦ Create + Update + Delete: Add new Gift Record
ðŸŸ¦ Create + Update + Delete: Add Rate Conversion
ðŸŸ¦ Create + Update + Delete: Payments to Teachers
ðŸŸ¦ Create + Update + Delete: Add New Course
ðŸŸ¦ Create + Update + Delete: Add Promotion Code Record
ðŸŸ¦ Create + Update + Delete: Add Payment
ðŸŸ¦ (Create Form will be redundant in future as payment by payers are automatically recorded)
ðŸŸ¦ Create + Update + Delete: Add Purchased Package to the database (commision percentage)
ðŸŸ¦ (Create Form will be redundant in future after full automation)
ðŸŸ¦ Create + Update + Delete: Add session
ðŸŸ¦ (Create Form will be redundant after when teachers add sessions in their own dashboards)
ðŸŸ¦ View table which every intro sessionâ€™s status be determined

Note: forms in this phase are simple forms with some combobox (input + dropbox) to easily search and select foreign keys by name, email or other fields. If any advanced data entry UI such as editable rows inside tables are needed, it is considered as a separate feature.

### Supervise and Revise Deliverable Codes [est. 16 hours Hamid]

âœ… Support Mehdi throughout his tasks [est. 5 hours (10 x 0.5 hour sessions)]
âœ… Onboarding Mehdi with advanced tools and approaches that will be used [est. 3 hours]
âœ… Revising and Refactoring and Solving any Complicated Issue the codes before Delivering [8 hours (One full day if not more before projectâ€™s end)]

## Things Exhibit B does not include

- Any functionality that require Supabase storage (like avatar image or any user specific media) and Supabase real-time (like chats functionality)
- Multilingual Features
- Designing and fine-tuning UI (Color pallet, gradients, typography, look and feel, ...) (However, we will use pretty good basics and best practices for establishing UI)
- SEO improvements (The Website in Phase 2 does not need SEO as its all behind the login wall)
- Connecting database to any other service, api, software or product (therefor connecting database to update google sheets is not in the scope of phase 1)
- Any service related to data science, data mining or finding patterns in data, recommendation algorithms.
- Turning the website to PWA.
- Any automated testing such as End-to-End testing, Integration testing, Unit testing. All testing will be done by manually interacting with the developed website.
- Adding marketing and analytics features
- Automated email and push notifications
- Payment Integration
- Guaranteeing that the dashboards works correctly any browser other than any unsupported browser such as any browser on smaller screen over a usual laptop, IE 11 and older, Safari on macOS and iOS (due to its lack of support for modern js features. Although Apple is working hard to catch up on the future versions of Safari.) and all iOS browsers (which are Safari under the hood)

## Browser Support

Expanding Browser support needs more testing and work. Phase 2 is about dashboards behind the login wall. Although it will be used by teachers and players too, for faster development we limit browser support as below.

Note that Browser support can be expanded to include more major browsers and also mobile browsers in future phases. We donâ€™t recommend to include older versions of browsers as the latest features in js and css will make new possibilities and save development time.

It is the client's responsibility to recommend all users of dashboards to use one the supported browsers. (needless to say a list of supported browsers can be shown in entry points of the website)

Note it doesnâ€™t mean it wouldnâ€™t work on other browsers, it means in case a feature is working in all supported browsers it is considered as working, whether it would work or not on other browsers or older versions. Also supporting IE 11 and older is close to impossible.

### Supported Browsers

Latest versions of Firefox and Chrome on Windows 11 and macOS

Note: Previously Chrome had issues with rendering large tables, but hasnâ€™t been observed recently. In case this issue appears again, the support for Chrome will be dropped.
Please see https://bugs.chromium.org/p/chromium/issues/detail?id=461877
Nevertheless Firefox still render tables faster and might give a slightly faster browsing in dashboards

â€” End of Exhibit B â€”
